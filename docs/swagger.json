{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Tasks_Manager app‚úÖ",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is a documentation of Personal Task's Manager app. üåê  - https://task-manager-backend-y4a1.onrender.com",
    "contact": {
      "name": "Technical Support",
      "url": "https://github.com/BilousPM/task-manager-backend",
      "email": "bilouspm@gmail.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    },
    {
      "url": "https://task-manager-backend-y4a1.onrender.com"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Auth operations."
    },
    {
      "name": "User",
      "description": "User's operation."
    },
    {
      "name": "Support",
      "description": "Support operation."
    },
    {
      "name": "Boards",
      "description": "Board operation."
    },
    {
      "name": "Column",
      "description": "Columns operation."
    },
    {
      "name": "Cards",
      "description": "Cards operations."
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register a new user",
        "operationId": "registerUser",
        "description": "Create a New User",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "John Doe",
                    "description": "The user's name."
                  },
                  "email": {
                    "type": "string",
                    "example": "john.doe@example.com",
                    "description": "The user's email address."
                  },
                  "password": {
                    "type": "string",
                    "example": "password123",
                    "description": "The user's password."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Creates a new user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a user!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string",
                          "example": "672cdd90db9f029835cc2bdc",
                          "description": "User ID created by the database Mongo DB"
                        },
                        "name": {
                          "type": "string",
                          "example": "John Doe",
                          "description": "The user's name"
                        },
                        "email": {
                          "type": "string",
                          "example": "john.doe@example.com",
                          "description": "The user's email address."
                        },
                        "theme": {
                          "type": "string",
                          "example": "light",
                          "description": "the application theme is selected by the User",
                          "default": "light"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "description": "Response when email address is already in use in database",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "ConflictError"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "This email address already exists in the database and cannot be reused."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login user and create session",
        "operationId": "loginUser",
        "description": "Login user",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "john.doe@example.com",
                    "description": "The user's email address."
                  },
                  "password": {
                    "type": "string",
                    "example": "password123",
                    "description": "The user's password."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully logged in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "Z2jvmaNKNxdwAm85WDbqrA=="
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "672cdd90db9f029835cc2bdc",
                              "description": "User ID created by the database Mongo DB"
                            },
                            "name": {
                              "type": "string",
                              "example": "John Doe",
                              "description": "The user's name"
                            },
                            "email": {
                              "type": "string",
                              "example": "john.doe@example.com",
                              "description": "The user's email address."
                            },
                            "password": {
                              "type": "string",
                              "example": "password123",
                              "description": "The user's password."
                            },
                            "theme": {
                              "type": "string",
                              "example": "light",
                              "description": "the application theme is selected by the user"
                            },
                            "avatarUrl": {
                              "type": "string",
                              "example": "https://res.cloudinary.com/denqnnmh2/image/upload/v1731087488/zn0arkh2mdtljnh5mhcf.webp\"",
                              "description": "avatar uploaded by user (if user uploaded)"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Ends the user session by deleting the session data.",
        "operationId": "logoutUser",
        "description": "Successfully logged out, no content returned.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "User logged out successfully"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/user/current": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get User by id",
        "operationId": "getUser",
        "description": "Get User by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Get User by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found User with id 65ca67e7ae7f10c88b598384 !"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "type": "object",
                          "$ref": "#/components/schemas/userSchema"
                        },
                        "boards": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/boardSchema"
                          }
                        },
                        "columns": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/columnsSchema"
                          }
                        },
                        "cards": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/cardsSchema"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/user/profile": {
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Partially update a profile",
        "operationId": "patchProfile",
        "description": "Partially updates a profile's information.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the user",
                    "example": "John Doe"
                  },
                  "email": {
                    "type": "string",
                    "example": "john.doe@example.com",
                    "description": "The user's email address."
                  },
                  "password": {
                    "type": "string",
                    "example": "password123",
                    "description": "The user's password"
                  },
                  "avatar": {
                    "type": "string",
                    "format": "binary",
                    "description": "User's avatar image file"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the profile.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Profile updated successfully"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/userSchema"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/user/theme": {
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Update a theme",
        "operationId": "patchTheme",
        "description": "Partially updates a theme's information.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "theme"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "dark",
                    "description": "background theme name"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the theme.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Theme changed successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "theme": {
                          "type": "string",
                          "example": "dark",
                          "enum": [
                            "light",
                            "dark",
                            "violet"
                          ],
                          "description": "Preferred theme of the user"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/user/delete-user": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete a user",
        "operationId": "deleteUser",
        "description": "Deletes a user by its ID.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Successful operation"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/support/send-message": {
      "post": {
        "tags": [
          "Support"
        ],
        "summary": "Send email to support",
        "operationId": "sendEmailToSupport",
        "description": "Send Message to support",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "message"
                ],
                "properties": {
                  "email": {
                    "description": "User's email",
                    "type": "string",
                    "example": "testuser@mail.com"
                  },
                  "message": {
                    "description": "Message that will be sent to support",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Creates a contact",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Hello, testuser@mail.com. The message sent to support"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "When there are no emails or messages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Email and message are required"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "When the email was not sent",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to send the email, please try again later."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/boards": {
      "post": {
        "tags": [
          "Boards"
        ],
        "summary": "Create board",
        "operationId": "createBoard",
        "description": "Create a board with user id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title"
                ],
                "properties": {
                  "title": {
                    "description": "Board's name",
                    "type": "string",
                    "example": "Project 1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Creates a new board",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a board!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/boardSchema"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/boards/{boardId}": {
      "get": {
        "tags": [
          "Boards"
        ],
        "summary": "Get board, columns, cards  by id",
        "operationId": "getBoard",
        "description": "Get board by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "boardId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "67ca67e7ae7f10c88b598384"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get board with structure by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "title",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found board with id 67ca67e7ae7f10c88b598384!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "board": {
                          "$ref": "#/components/schemas/boardSchema"
                        },
                        "columnsAll": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "_id",
                              "title",
                              "boardId"
                            ],
                            "properties": {
                              "_id": {
                                "type": "string",
                                "description": "Unique identifier for the column",
                                "example": "67305580e57ecb50c727d2ea"
                              },
                              "title": {
                                "type": "string",
                                "description": "Title of the column",
                                "example": "To Do something more #1"
                              },
                              "boardId": {
                                "type": "string",
                                "description": "Unique identifier of the board this column belongs to",
                                "example": "672babd7db3166fdaba54a5c"
                              },
                              "createdAt": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Date and time when the column was created",
                                "example": "2024-11-10T06:41:04.611Z"
                              },
                              "updatedAt": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Date and time when the column was last updated",
                                "example": "2024-11-10T06:41:04.611Z"
                              },
                              "cards": {
                                "items": {
                                  "$ref": "#/components/schemas/cardsSchema"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "patch": {
        "tags": [
          "Boards"
        ],
        "summary": "Update board by id",
        "operationId": "putchBoard",
        "description": "Update board by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "boardId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "67ca67e7ae7f10c88b598384"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "description": "Board's name",
                    "type": "string",
                    "example": "Project 1"
                  },
                  "background": {
                    "description": "background images",
                    "type": "string",
                    "example": "black"
                  },
                  "icon": {
                    "description": "Board's icon",
                    "type": "string",
                    "example": "board icon modern"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Creates a board",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully updated a board with Id 6731c3311073caeedf7353b6!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/boardSchema"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "tags": [
          "Boards"
        ],
        "summary": "Delete board",
        "operationId": "deleteBoard",
        "description": "Delete board",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "boardId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "67ca67e7ae7f10c88b598384"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/columns/{boardId}": {
      "post": {
        "tags": [
          "Column"
        ],
        "summary": "Create column",
        "operationId": "createColumn",
        "description": "Create column with board Id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "boardId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "67ca67e7ae7f10c88b598384"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title"
                ],
                "properties": {
                  "title": {
                    "description": "column's name",
                    "type": "string",
                    "example": "To Do something"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Creates a board",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Column created successfully"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/columnsSchema"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/columns/{columnId}": {
      "patch": {
        "tags": [
          "Column"
        ],
        "summary": "Update column",
        "operationId": "updateColumn",
        "description": "Update column with column Id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "67ca67e7ae7f10c88b598384"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "description": "column's name",
                    "type": "string",
                    "example": "To Do something New"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Creates a board",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Column updated successfully"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/columnsSchema"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "tags": [
          "Column"
        ],
        "summary": "Delete column",
        "operationId": "deleteColumn",
        "description": "Delete column",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "67ca67e7ae7f10c88b598384"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted column"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/cards/{columnId}": {
      "post": {
        "tags": [
          "Cards"
        ],
        "summary": "Create card",
        "operationId": "createCard",
        "description": "Create a card with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "67ca67e7ae7f10c88b598384"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "description",
                  "deadline",
                  "priority"
                ],
                "properties": {
                  "title": {
                    "description": "Card's title",
                    "type": "string",
                    "example": "New card title"
                  },
                  "description": {
                    "description": "Card's description",
                    "type": "string",
                    "example": "New task description"
                  },
                  "deadline": {
                    "description": "Card's deadline",
                    "type": "string",
                    "example": "12.11.2024"
                  },
                  "priority": {
                    "description": "Card's priority",
                    "type": "string",
                    "enum": [
                      "Low",
                      "Medium",
                      "High",
                      "Without priority"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Creates a contact",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a card!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/cardsSchema"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/cards/{cardId}": {
      "patch": {
        "tags": [
          "Cards"
        ],
        "summary": "Update card by id",
        "operationId": "updateCard",
        "description": "Update card by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "description": "Card's title",
                    "type": "string",
                    "example": "New card title"
                  },
                  "description": {
                    "description": "Card's description",
                    "type": "string",
                    "example": "New task description"
                  },
                  "deadline": {
                    "description": "Card's deadline",
                    "type": "string",
                    "example": "12.11.2024"
                  },
                  "priority": {
                    "description": "Card's priority",
                    "type": "string",
                    "enum": [
                      "Low",
                      "Medium",
                      "High",
                      "Without priority"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully updated a card!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully updated a card!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/cardsSchema"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "tags": [
          "Cards"
        ],
        "summary": "Delete card by id",
        "operationId": "deleteCard",
        "description": "Delete card by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete card by id"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "NotFoundError"
                    },
                    "data": {
                      "type": "object",
                      "example": {
                        "message": "Card not found"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cards/replace/{cardId}": {
      "patch": {
        "tags": [
          "Cards"
        ],
        "summary": "Replace card by id",
        "operationId": "replaceCard",
        "description": "Replace card by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "columnId"
                ],
                "properties": {
                  "columnId": {
                    "description": "Card's column id",
                    "type": "string",
                    "example": "65e4decdd286b30065d54af9"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully patched a card!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully patched a card!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/cardsSchema"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "responses": {
      "400": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Please check the provided data"
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Access token expired"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "NotFoundError"
                },
                "data": {
                  "type": "object",
                  "example": {
                    "message": "Not found"
                  }
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "userSchema": {
        "description": "User object schema",
        "type": "object",
        "required": [
          "name",
          "email",
          "password",
          "theme"
        ],
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "minLength": 3,
            "maxLength": 30,
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "minLength": 8,
            "maxLength": 16,
            "example": "yourPassword123!",
            "writeOnly": true
          },
          "avatarUrl": {
            "type": "string",
            "format": "uri",
            "example": "https://res.cloudinary.com/uqwgdu/image/upload/image.png"
          },
          "theme": {
            "type": "string",
            "description": "User interface design theme",
            "enum": [
              "light",
              "dark",
              "violet"
            ],
            "example": "light"
          }
        }
      },
      "boardSchema": {
        "description": "Schema for the board object, containing details like title, icon, background, and owner",
        "type": "object",
        "required": [
          "title",
          "owner"
        ],
        "additionalProperties": false,
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the board",
            "minLength": 3,
            "maxLength": 30,
            "example": "Project Roadmap"
          },
          "icon": {
            "type": "string",
            "description": "The icon for the board",
            "default": "default",
            "example": "default"
          },
          "background": {
            "type": "string",
            "description": "The background color or image of the board",
            "default": "default",
            "example": "default"
          },
          "owner": {
            "type": "string",
            "description": "The ID of the user who owns the board",
            "example": "64a7b9e2f2c23a1b4a0b5678"
          }
        }
      },
      "columnsSchema": {
        "description": "Schema for the column object, containing details like title and board ID",
        "type": "object",
        "required": [
          "title",
          "boardId"
        ],
        "additionalProperties": false,
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the column",
            "minLength": 3,
            "maxLength": 30,
            "example": "To Do"
          },
          "boardId": {
            "type": "string",
            "description": "The ID of the board to which this column belongs",
            "example": "64a7b9e2f2c23a1b4a0b5678"
          }
        }
      },
      "cardsSchema": {
        "description": "Schema for the card object, containing details like title, description, deadline, priority, and column ID",
        "type": "object",
        "required": [
          "title",
          "description",
          "priority",
          "columnId"
        ],
        "additionalProperties": false,
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the card",
            "minLength": 3,
            "maxLength": 30,
            "example": "Complete project report"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the task or card",
            "minLength": 3,
            "example": "Prepare and finalize the project report for Q4"
          },
          "deadline": {
            "type": "string",
            "format": "date",
            "description": "The deadline for the card",
            "example": "2024-12-31"
          },
          "priority": {
            "type": "string",
            "description": "The priority level of the card",
            "enum": [
              "Low",
              "Medium",
              "High",
              "Without priority"
            ],
            "default": "Without priority",
            "example": "Medium"
          },
          "columnId": {
            "type": "string",
            "description": "The ID of the column to which this card belongs",
            "example": "64a7b9e2f2c23a1b4a0b5678"
          }
        }
      }
    }
  }
}